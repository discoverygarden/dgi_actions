<?php

/**
 * @file
 * Holds hooks for DGI Actions handle.
 */

use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\NodeInterface;

/**
 * Function for adding unique constraint.
 *
 * This function is used to add a unique constraint
 * to a specified field in an entity. If the 'suffix_field' is
 * set and exists in the fields array, it adds a 'UniqueField' constraint to it.
 *
 * @param array $fields
 *   The fields array.
 * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
 *   The entity type.
 */
function _dgi_actions_handle_suffix_validation_add_constraint(array &$fields, EntityTypeInterface $entity_type): void {
  $suffix_field = _dgi_actions_handle_get_suffix_field();

  // If the suffix field is not set or the suffix
  // field does not exist in fields, return.
  if (empty($fields[$suffix_field])) {
    return;
  }

  // Add UniqueField constraint to the configured suffix field.
  $fields[$suffix_field]->addConstraint('UniqueField');
}

/**
 * Function to get the suffix field.
 *
 * @return string|null
 *   The suffix field if it is set, NULL otherwise.
 */
function _dgi_actions_handle_get_suffix_field(): string|null {
  /** @var \Drupal\dgi_actions\Entity\ServiceDataInterface $handle_service_data */
  $handle_service_data = Drupal::entityTypeManager()->getStorage('dgiactions_servicedata')->load('handles');
  if ($handle_service_data) {
    $data = $handle_service_data->getData();
    return $data['suffix_field'] ?? NULL;
  }
}

/**
 * Implements hook_entity_base_field_info_alter().
 *
 * Adds a unique constraint to the suffix field.
 */
function dgi_actions_handle_entity_base_field_info_alter(&$fields, EntityTypeInterface $entity_type) {
  if ($entity_type->id() === 'node') {
    _dgi_actions_handle_suffix_validation_add_constraint($fields, $entity_type);
  }

}

/**
 * Implements hook_entity_bundle_field_info_alter().
 *
 * It checks if the entity type is 'node' and if so,
 * it calls the function to add a unique constraint.
 */
function dgi_actions_handle_entity_bundle_field_info_alter(&$fields, EntityTypeInterface $entity_type) {
  if ($entity_type->id() === 'node') {
    _dgi_actions_handle_suffix_validation_add_constraint($fields, $entity_type);
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 *
 * This hook is used to prevent changes to the suffix field of a node.
 * If the field value has been changed, it reverts it to the original
 * value and adds a message to the user.Needed for spreadsheet ingest.
 */
function dgi_actions_handle_node_presave(NodeInterface $node) {
  $suffix_field = _dgi_actions_handle_get_suffix_field();

  // Check if the node has the suffix field.
  if ($suffix_field && $node->hasField($suffix_field)) {
    // Load the original node from the database.
    $original_node = Drupal::entityTypeManager()->getStorage('node')->loadUnchanged($node->id());

    // Check if the field value has been changed.
    if ($node->{$suffix_field}->value != $original_node->{$suffix_field}->value) {
      // If the field value has been changed, revert it to the original value.
      $node->{$suffix_field}->value = $original_node->{$suffix_field}->value;
      Drupal::messenger()->addMessage('The suffix field cannot be changed.');
    }
  }

}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * This hook is used to make the suffix field non-editable
 * if it has a value when editing a node.
 */
function dgi_actions_handle_form_node_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  $suffix_field = _dgi_actions_handle_get_suffix_field();

  // Load the node from the form state.
  $node = $form_state->getFormObject()->getEntity();

  // Check if the form is for a node and if the suffix field exists in the form.
  if (!$node->isNew() && isset($form[$suffix_field])) {
    // Check if the suffix field has a value.
    if ($node->{$suffix_field}->value) {
      // Set the suffix field to be non-editable.
      $form[$suffix_field]['#disabled'] = TRUE;
      $form[$suffix_field]['#description'] = t('The suffix field cannot be changed.');
    }
  }
}
